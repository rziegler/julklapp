package ch.bbv.julklapp;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import ch.bbv.julklapp.core.dao.Circle;
import ch.bbv.julklapp.persistence.EMF;

@Path("/circles")
public class CircleResource {
	
//	@PUT
//	@Consumes(MediaType.APPLICATION_JSON)
//	@Produces(MediaType.APPLICATION_JSON)
//	@Path("/{name}")
//	public Circle createCircle(@PathParam("name") String name, JAXBElement<Circle> circle) {
//		EntityManager em = EMF.get().createEntityManager();
//		try {
//			em.getTransaction().begin();
//			em.persist(circle.getValue());
//			em.getTransaction().commit();
//		} finally {
//			em.close();
//		}
//		return circle.getValue();
//	}

	@GET
	@Produces(MediaType.TEXT_PLAIN)
	@Path("/{name}/delete")
	public String deleteCircle(@PathParam("name") String name) {
		StringBuilder builder = new StringBuilder();
		EntityManager em = EMF.get().createEntityManager();
		try {
			Query query = em
					.createQuery("SELECT c FROM Circle c WHERE c.name = '"
							+ name + "'");
			@SuppressWarnings("unchecked")
			List<Circle> circles = query.getResultList();

			if (circles.isEmpty()) {
				builder.append("No circle found for " + name);
			} else if (circles.size() > 1) {
				builder.append("Multiple circles found for " + name);
			} else {
				em.getTransaction().begin();
				Circle circle = circles.get(0);
				em.remove(circle);
				em.getTransaction().commit();
				builder.append("Circle deleted " + circle.getKey() + ", " + name);
			}
		} finally {
			em.close();
		}
		return builder.toString();
	}

	@GET
	@Produces(MediaType.TEXT_PLAIN)
	@Path("/")
	public String getCircles(@PathParam("name") String name) {
		StringBuilder builder = new StringBuilder();
		EntityManager em = EMF.get().createEntityManager();
		try {
			Query query = em.createQuery("SELECT c FROM Circle c");
			@SuppressWarnings("unchecked")
			List<Circle> circles = query.getResultList();

			if (circles.isEmpty()) {
				builder.append("No circles yet.");
			}
			for (Circle c : circles) {
				builder.append(c.getName());
				builder.append(", ");
			}
		} finally {
			em.close();
		}
		return builder.toString();
	}
	
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/{name}/view")
	public Circle getCircle(@PathParam("name") String name) {
		StringBuilder builder = new StringBuilder();
		EntityManager em = EMF.get().createEntityManager();
		try {
			Query query = em
					.createQuery("SELECT c FROM Circle c WHERE c.name = '"
							+ name + "'");
			@SuppressWarnings("unchecked")
			List<Circle> circles = query.getResultList();

			if (circles.isEmpty()) {
				builder.append("No circle found for " + name);
			} else if (circles.size() > 1) {
				builder.append("Multiple circles found for " + name);
			} else {
				return circles.get(0);
			}
		} finally {
			em.close();
		}
		return null;
	}
}
